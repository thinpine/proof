# -*- coding: utf-8 -*-
"""lvsh-triangle-inequality.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MlCC0qtNSH2GCoCEyeMXpBH5pVQ6OXAo
"""

import math
from typing import List

def levenshtein_distance(s1: str, s2: str) -> int:
    """
    Calculates the Levenshtein distance (minimum number of single-character
    edits required to change one word into the other) using dynamic programming.

    The distance is calculated based on insertion, deletion, and substitution.
    """
    len_s1 = len(s1)
    len_s2 = len(s2)

    # Initialize a matrix (or 2D list) for dynamic programming.
    # The matrix size is (len_s1 + 1) x (len_s2 + 1)
    dp: List[List[int]] = [[0] * (len_s2 + 1) for _ in range(len_s1 + 1)]

    # Base case: distance of any string to an empty string (deletion/insertion costs)
    for i in range(len_s1 + 1):
        dp[i][0] = i
    for j in range(len_s2 + 1):
        dp[0][j] = j

    # Fill the DP table
    for i in range(1, len_s1 + 1):
        for j in range(1, len_s2 + 1):

            # Cost of substitution: 0 if characters match, 1 otherwise
            cost = 0 if s1[i - 1] == s2[j - 1] else 1

            # dp[i][j] is the minimum of:
            # 1. Deletion: dp[i - 1][j] + 1
            # 2. Insertion: dp[i][j - 1] + 1
            # 3. Substitution: dp[i - 1][j - 1] + cost

            dp[i][j] = min(
                dp[i - 1][j] + 1,        # Deletion
                dp[i][j - 1] + 1,        # Insertion
                dp[i - 1][j - 1] + cost  # Substitution
            )

    return dp[len_s1][len_s2]

def main():
    """
    Main function to get user input, calculate distances, and prove the
    triangle inequality for Levenshtein distance.
    """
    print("--- Levenshtein Distance Triangle Inequality Proof ---")
    print("Inequality: D(A, C) <= D(A, B) + D(B, C)")

    try:
        # 1. Get three strings from the user
        s_a = input("\nEnter the first string (A): ").strip().lower()
        s_b = input("Enter the second string (B, the intermediate point): ").strip().lower()
        s_c = input("Enter the third string (C): ").strip().lower()

        if not s_a or not s_b or not s_c:
             print("\nError: All strings must contain at least one character.")
             return

        print("\n--- Calculating Distances ---")

        # 2. Calculate the three necessary distances

        # Direct distance D(A, C)
        dist_ac = levenshtein_distance(s_a, s_c)
        print(f"D('{s_a}', '{s_c}') (Distance A to C) = {dist_ac}")

        # Intermediate distance D(A, B)
        dist_ab = levenshtein_distance(s_a, s_b)
        print(f"D('{s_a}', '{s_b}') (Distance A to B) = {dist_ab}")

        # Intermediate distance D(B, C)
        dist_bc = levenshtein_distance(s_b, s_c)
        print(f"D('{s_b}', '{s_c}') (Distance B to C) = {dist_bc}")

        # 3. Check the inequality
        sum_intermediate = dist_ab + dist_bc
        is_satisfied = dist_ac <= sum_intermediate

        print("\n--- Proving Triangle Inequality ---")
        print(f"Left Side (D(A, C)): {dist_ac}")
        print(f"Right Side (D(A, B) + D(B, C)): {dist_ab} + {dist_bc} = {sum_intermediate}")

        if is_satisfied:
            print(f"\nResult: {dist_ac} <= {sum_intermediate} (True)")
            print("The Levenshtein distance triangle inequality holds true for these strings.")
            print("This is because the shortest path from A to C (D(A, C)) cannot be longer")
            print("than any path that goes through an intermediate point B (D(A, B) + D(B, C)).")
        else:
            # This should never happen in a correct Levenshtein implementation
            print(f"\nResult: {dist_ac} <= {sum_intermediate} (FALSE)")
            print("WARNING: The triangle inequality failed. This indicates an error in the distance calculation.")

    except Exception as e:
        print(f"\nAn error occurred: {e}")

if __name__ == "__main__":
    main()